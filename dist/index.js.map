{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export type BeesResolverMode = \"percent\" | \"absolute\";\n\nexport enum BeesLoadStatus {\n  Loading = \"loading\",\n  Failed = \"failed\",\n  Completed = \"completed\",\n}\n\nexport interface BeesLoadData {\n  type: \"SUCCESS\" | \"ERROR\";\n  status?: number;\n  data?: string;\n  stringToCompare?: string | undefined;\n  id: string;\n}\n\nexport interface BeesLoadCompleted {\n  [id: string]: {\n    ids: string[];\n    data: string;\n    stringToCompare: string | undefined;\n  };\n}\n\nexport interface BeesLoadErrors {\n  [id: string]: {\n    id: string;\n    status?: number;\n  };\n}\n\nexport enum BeesLoadError {\n  // request\n  IncompleteAddress = \"The address is incomplete\",\n  ChainNotFound = \"Blockchain not found\",\n  MissingBlockchainData = \"Missing data from the blockchain\",\n  RecordNotFound = \"Record not found\",\n\n  // not found\n  ResourceNotFound = \"Contract not found\",\n\n  // server error\n  ServerError = \"Server error\",\n\n  // resolver\n  InsufficientNumberOfNodes = \"Insufficient number of nodes\",\n  OutOfNodes = \"Out of nodes\",\n  UnstableState = \"Unstable state\",\n  UnaccurateState = \"Unaccurate state\",\n\n  // parsing\n  FailedToParseResponse = \"Failed to parse response\",\n  InvalidManifest = \"Invalid manifest\", // for dappy manifests\n  InvalidSignature = \"Invalid signature\",\n  InvalidRecords = \"Invalid records\", // for records\n  InvalidNodes = \"Invalid nodes\", // for nodes\n  InvalidServers = \"Invalid servers\", // for nodes\n\n  PostParseError = \"Parse error after multicall\", // for nodes\n  UnknownCriticalError = \"Unknown critical error\", // for nodes\n}\n\nexport interface BeesLoadErrorWithArgs {\n  error: BeesLoadError;\n  args: { [key: string]: any };\n}\n\nexport interface ResolverOutput {\n  loadState: BeesLoadCompleted;\n  loadErrors: BeesLoadErrors;\n  loadPending: string[];\n  loadError?: BeesLoadErrorWithArgs;\n  status: BeesLoadStatus;\n}\n\nconst indexData = (\n  data: BeesLoadData,\n  existingData: BeesLoadCompleted,\n  comparer?: (x: string | undefined) => any\n): BeesLoadCompleted => {\n  let found = false;\n  let stringToCompare = data.data;\n\n  if (typeof comparer === \"function\") {\n    try {\n      stringToCompare = comparer(data.data);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // initialize existingData\n  if (Object.keys(existingData).length === 0) {\n    existingData = {\n      \"1\": {\n        ids: [data.id],\n        data: data.data || \"\",\n        stringToCompare: stringToCompare,\n      },\n    };\n  } else {\n    Object.keys(existingData).forEach((key) => {\n      if (stringToCompare === existingData[key].stringToCompare) {\n        found = true;\n        existingData = {\n          ...existingData,\n          [key]: {\n            ...existingData[key],\n            ids: existingData[key].ids.concat(data.id),\n          },\n        };\n      }\n    });\n  \n    if (!found) {\n      existingData = {\n        ...existingData,\n        [Object.keys(existingData).length + 1]: {\n          ids: [data.id],\n          data: data.data,\n          stringToCompare: stringToCompare,\n        },\n      };\n    }\n  }\n\n  return existingData;\n};\n\nexport const resolver = (\n  queryHandler: (urlToQuery: string) => Promise<BeesLoadData>,\n  ids: string[],\n  resolverMode: BeesResolverMode,\n  resolverAccuracy: number,\n  resolverAbsolute: number,\n  comparer?: (x: string | undefined) => any\n): Promise<ResolverOutput> => {\n  let loadErrors: BeesLoadErrors = {};\n  let loadState: BeesLoadCompleted = {};\n  let loadPending: string[] = [];\n\n  return new Promise((resolve, reject) => {\n    if (resolverMode === \"absolute\") {\n      if (resolverAbsolute > ids.length) {\n        resolve({\n          loadErrors: loadErrors,\n          loadState: loadState,\n          loadPending: loadPending,\n          loadError: {\n            error: BeesLoadError.InsufficientNumberOfNodes,\n            args: {\n              expected: resolverAbsolute,\n              got: ids.length,\n            },\n          },\n          status: BeesLoadStatus.Failed,\n        });\n        return;\n      }\n\n      let i = 0;\n\n      const callBatch = async (i: number) => {\n        // idsToQuery is of same size as resolverAbsolute\n        // but you can change this to do 3 by 3 or 4 by 4 etc.\n        const idsToQuery = ids.slice(i, i + resolverAbsolute);\n        if (idsToQuery.length === 0) {\n          resolve({\n            loadErrors: loadErrors,\n            loadState: loadState,\n            loadPending: loadPending,\n            loadError: {\n              error: BeesLoadError.OutOfNodes,\n              args: {\n                alreadyQueried: i - Object.keys(loadErrors).length,\n                resolverAbsolute: resolverAbsolute,\n              },\n            },\n            status: BeesLoadStatus.Failed,\n          });\n          return;\n        }\n        i += idsToQuery.length;\n\n        loadPending = loadPending.concat(idsToQuery);\n\n        const responses = await Promise.all(idsToQuery.map(id => queryHandler(id)));\n\n        responses.forEach((data: BeesLoadData) => {\n          loadPending = loadPending.filter((id) => id !== data.id);\n\n          if (data.type === \"SUCCESS\") {\n            try {\n              const newLoadState = indexData(data, loadState, comparer);\n              loadState = newLoadState;\n            } catch (err) {\n              loadErrors = {\n                ...loadErrors,\n                [data.id]: {\n                  id: data.id,\n                  status: (err as any).message ? parseInt((err as any).message, 10) : 400,\n                },\n              };\n            }\n          } else {\n            loadErrors = {\n              ...loadErrors,\n              [data.id]: {\n                id: data.id,\n                status: data.status,\n              },\n            };\n          }\n\n        });\n\n        // 5 or more load errors\n        if (Object.keys(loadErrors).length > 4) {\n          resolve({\n            loadErrors: loadErrors,\n            loadState: loadState,\n            loadPending: loadPending,\n            loadError: {\n              error: BeesLoadError.ServerError,\n              args: {\n                numberOfLoadErrors: Object.keys(loadErrors).length,\n              },\n            },\n            status: BeesLoadStatus.Failed,\n          });\n          return;\n\n          // 3 or more different groups\n        } else if (Object.keys(loadState).length > 2) {\n          resolve({\n            loadErrors: loadErrors,\n            loadState: loadState,\n            loadPending: loadPending,\n            loadError: {\n              error: BeesLoadError.UnstableState,\n              args: {\n                numberOfLoadStates: Object.keys(loadState).length,\n              },\n            },\n            status: BeesLoadStatus.Failed,\n          });\n          return;\n        } else {\n          const totalOkResponses = Object.keys(loadState).reduce(\n            (total, k) => {\n              return total + loadState[k].ids.length;\n            },\n            0\n          );\n\n          // don't ruen this into a .forEach, return are\n          // not effecive in forEach loops\n          for (let j = 0; j < Object.keys(loadState).length; j += 1) {\n            const key = Object.keys(loadState)[j];\n\n            const nodesWithOkResponses = loadState[key].ids.length;\n\n            // at least [resolverAbsolute] responses of the same\n            // resolver must Complete or Fail\n            if (nodesWithOkResponses >= resolverAbsolute) {\n              if (\n                resolverAccuracy / 100 >\n                loadState[key].ids.length / totalOkResponses\n              ) {\n                resolve({\n                  loadErrors: loadErrors,\n                  loadState: loadState,\n                  loadPending: loadPending,\n                  loadError: {\n                    error: BeesLoadError.UnaccurateState,\n                    args: {\n                      totalOkResponses: totalOkResponses,\n                      loadStates: Object.keys(loadState).map((k) => {\n                        return {\n                          key: k,\n                          okResponses: loadState[k].ids.length,\n                          percent:\n                            Math.round(\n                              (100 *\n                                (100 * loadState[k].ids.length)) /\n                                totalOkResponses\n                            ) / 100,\n                        };\n                      }),\n                    },\n                  },\n                  status: BeesLoadStatus.Failed,\n                });\n                // will stop for loop\n                return;\n              }\n\n              resolve({\n                loadErrors: loadErrors,\n                loadState: loadState,\n                loadPending: loadPending,\n                status: BeesLoadStatus.Completed,\n              });\n              // will stop for loop\n              return;\n            }\n          }\n        }\n\n        // if no return in for loop, go\n        // on next batch\n        callBatch(i);\n      };\n\n      callBatch(i);\n\n    } else {\n      reject('Only absolute mode is supported')\n    }\n  });\n};\n"],"names":["BeesLoadStatus","BeesLoadError"],"mappings":"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"}